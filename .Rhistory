mutate(vocab_agg = cumsum(vocab_month))
vocabsize_sub <- vocabsize_lyon %>% distinct(Speaker, AOP, vocab_month)
mean_degree_full_target <- feather::read_feather("Data/mean_degree_full_target_lyon.feather")
mean_degree_full_actual <- feather::read_feather("Data/mean_degree_full_actual_lyon.feather")
global_network <- globalthresholds_AOP_lyon %>%
rename("PAQ_val" = "degree") %>%
dplyr::select(-age, -threshold)
mean_degree_full <- rbind(mean_degree_full_actual, mean_degree_full_target)
comparison_data <- read_csv("Data/comparison_data_lyon.csv") %>%
distinct(Gloss, Speaker, .keep_all=T) %>%
dplyr::select(Gloss, Speaker, Targetphon, nsyl_target) %>%
rename("gloss1" = "Gloss")
global_network_split <- global_network %>%
pivot_wider(names_from = data_type, values_from = PAQ_val) %>%
rename("PAQ_target" = "target",
"PAQ_actual" = "actual")
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
group_by(Speaker, gloss1, data_type) %>%
mutate(learned_next = ifelse(age == max(age), 1, 0)) %>%
left_join(comparison_data) %>%
left_join(vocabsize_sub) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE))) %>%
#PAT_weighted = PAT_val/vocab_month) %>%
group_by(Speaker) %>%
mutate(PAT_scaled = c(scale(PAT_val, center = TRUE, scale = TRUE)),
PAT_scaled_m = c(scale(PAT_val_m, center = TRUE, scale = TRUE)),
PAQ_scaled_target = c(scale(PAQ_target, center = TRUE, scale = TRUE)),
PAQ_scaled_actual = c(scale(PAQ_actual, center = TRUE, scale = TRUE)))
View(regression_data)
freq_lyon <- read_csv("Data/freq_lyon.csv")
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n",)   # how many tokens of each word included in the data
regression_data <- regression_data %>%
left_join(freq_lyon) %>%
left_join(FULLsample_var) %>%
mutate(total_freq = ifelse(is.na(total_freq), 0, total_freq)) %>%
mutate(freq_scaled = c(scale(total_freq, center = TRUE, scale = TRUE)),
vocab_scaled = c(scale(vocab_month, center = TRUE, scale = TRUE)),
tokens_scaled = c(scale(n_tokens, center = TRUE, scale = TRUE))) %>%
mutate(corpus = "Lyon",
age_scaled = c(scale(age, center = T, scale = T)))
feather::write_feather(regression_data, "Data/regression_data_lyon.feather")
# Updated 3rd November 2022
# This data takes the sample generated in data_cleaning.R and creates a series of phonetic distance values for each word in the dataframe
FULLsample <- feather::read_feather("Data/FULLsample_Providence.feather")
FULLsample$Session <- gsub("^[^.]*.", "", FULLsample$Session) # create variable to show session number in only numeric form
FULLsample$Session <- gsub('[\a\b]', '', FULLsample$Session)
# write_csv(FULLsample, "ProvidenceDataCHI.csv")
sample_IPAtarget <- FULLsample %>% select(ID, Speaker, Session, Gloss,
IPAtarget, IPAactual,
Targetphon, Actualphon,
TargetCV, ActualCV) # Create new dataframe to generate IPA segmental values
# substitute all target vowels for generic V because I don't care about vowels
sample_IPAtarget$Vremoved_target <- gsub("([
i
u
ɪ
ʊ
e
o
ə
ɛ
ʌ
ɔ
ɜ
æ
a
ɑ])", "V", sample_IPAtarget$IPAtarget)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPAtarget$Vremoved_target <- gsub("VVV", "V", sample_IPAtarget$Vremoved_target)  # remove triphthongs to count as single vowel (following Monaghan et al 2010 but also because we're not looking at vowels here)
sample_IPAtarget$Vremoved_target <- gsub("VV", "V", sample_IPAtarget$Vremoved_target)  # remove diphthongs to count as single vowel (following Monaghan et al 2010 but also because we're not looking at vowels here)
sample_IPAtarget <- sample_IPAtarget %>% mutate(nsyl_target = stringr::str_count(Vremoved_target, "V"),
nsyl_target = ifelse(nsyl_target == 0, 1, nsyl_target))
# substitute all actual vowels for generic V because I don't care about vowels here either
sample_IPAtarget$Vremoved_actual <- gsub("([
i
u
ɪ
ʊ
e
o
ə
ɛ
ʌ
ɔ
ɜ
æ
a
ɑ])", "V", sample_IPAtarget$IPAactual)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPAtarget$Vremoved_actual <- gsub("VVV", "V", sample_IPAtarget$Vremoved_actual)
sample_IPAtarget$Vremoved_actual <- gsub("VV", "V", sample_IPAtarget$Vremoved_actual)
sample_IPAtarget <- sample_IPAtarget %>% mutate(nsyl_actual = stringr::str_count(Vremoved_actual, "V"),
nsyl_actual = ifelse(nsyl_actual == 0, 1, nsyl_actual))
# Now split data by syllable structures since difference structures need treating differently when running a segment-by-segment comparison
# Create a new dataframe to gather this info, to be joined to sample_IPAtarget later
target_structures_sample <- as.data.frame(levels(sample_IPAtarget$TargetCV)) # list all structures in the data
target_structures_sample <- target_structures_sample %>%
rename("TargetCV" = `levels(sample_IPAtarget$TargetCV)`)
# Create a new column that simplifies each structure by its 'core' syllabic properties
target_structures_sample$TargetCV_edited <- gsub("VVVV", "V", target_structures_sample$TargetCV)
target_structures_sample$TargetCV_edited <- gsub("VVV", "V", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("VV", "V", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("G", "C", target_structures_sample$TargetCV_edited)  # counting glides as consonants, consistent with above
target_structures_sample$TargetCV_edited <- gsub("CCCC", "C", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("CCC", "C", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("CC", "C", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("^", "", target_structures_sample$TargetCV_edited)
target_structures_sample <- target_structures_sample %>%
mutate(TargetCV_edited = as.factor(TargetCV_edited))
# Do the same for actual syllabic structure. This will allow for comparison of targetlikeness later on
sample_IPAtarget$ActualCV_edited <- gsub("VVVV", "V", sample_IPAtarget$ActualCV)
sample_IPAtarget$ActualCV_edited <- gsub("VVV", "V", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("VV", "V", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("G", "C", sample_IPAtarget$ActualCV_edited)  # counting glides as consonants, consistent with above
sample_IPAtarget$ActualCV_edited <- gsub("CCCC", "C", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("CCC", "C", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("CC", "C", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("^", "", sample_IPAtarget$ActualCV_edited)
#levels(target_structures$structure_edited)
# create two new columns that alongside sample_IPAtarget$nsyl_target together will allow for filtering of specific word structures across the data
# openclosed = does the target form have a coda? (yes = closed, no = open)
# onset = is it a vowel (V) or consonant (C) at word onset?
target_structures_sample <- target_structures_sample %>%
mutate(openclosed = ifelse(TargetCV_edited %in% c("C", "CVC", "VC", "CVCVC", "VCVC", "CVCVC^CVC", "CVCVCVC", "VCVCVC",
"CVCVCVCVC", "VCVCVCVC", "CVCVCVCVCVC", "VCVCVCVCVC", "CVCVCVCVCVCVC"), "closed", "open"),
onset = ifelse(TargetCV_edited %in% c("V", "V^CV", "VC", "VCV", "VCVC", "VCVCV", "VCVCVC", "VCVCVCV", "VCVCVCVC",
"VCVCVCVCV", "VCVCVCVCVC", "VCVCVCVCVCV"), "V", "C"))
sample_IPAtarget <- sample_IPAtarget %>% left_join(target_structures_sample) # join with main dataframe
ggplot(sample_IPAtarget, aes(x = nsyl_target)) + geom_histogram(binwidth = 0.5)  +
scale_y_sqrt()
ggplot(sample_IPAtarget, aes(x = nsyl_actual)) + geom_histogram(binwidth = 0.5)  +
scale_y_sqrt()
sample_IPAtarget %>% group_by(nsyl_actual) %>% tally()
1547/147988 #1% 3 syls
# Now each segment of each word needs to be separated in order to compare target forms with actual productions
# This process is done by syllable number, starting with target forms and then considering actual forms in relation to these
# For example: monosyllabic target /kat/ is separated into /k/~/a/~/t/ and then child's actual production is considered in relation to this
# Actual production might be a monosyllable ([kat]), or a disyllable [kaka] or multisyllabic [kakaka]. In each of these cases, /k/~/a/~/t/ as generated below
# is compared against the segments from the actual form
# First all target monosyllables are compared with all target forms (from 1-6 syllables, V- and C-intial separately)
# Then disyllables (compared with 1-6 syllable forms, V- and C-initial), trisyllables, etc. up to 6-syllable words
# Words beyond 6 syllables tended to be produced with vocal play, and so were excluded from the analysis
nsyl_target_list <- sample_IPAtarget %>%
split(., f = .$nsyl_target)
sample_IPAtarget_loop <- lapply(nsyl_target_list, FUN = function(element) {
split_syl <- element %>% separate(Vremoved_target, c("S1C1_target", "S2C1_target", "S3C1_target", "S4C1_target", "S5C1_target", "S6C1_target", "SFC1_target"), "V")
split_clust <- split_syl %>% separate(S1C1_target, c("TS1C1", "TS1C2", "TS1C3", "TS1C4", "TS1C5"), sep = "(?<=.)") %>%
separate(S2C1_target, c("TS2C1", "TS2C2", "TS2C3", "TS2C4", "TS2C5"), sep = "(?<=.)") %>%
separate(S3C1_target, c("TS3C1", "TS3C2", "TS3C3", "TS3C4", "TS3C5"), sep = "(?<=.)") %>%
separate(S4C1_target, c("TS4C1", "TS4C2", "TS4C3", "TS4C4", "TS4C5"), sep = "(?<=.)") %>%
separate(S5C1_target, c("TS5C1", "TS5C2", "TS5C3", "TS5C4", "TS5C5"), sep = "(?<=.)") %>%
separate(S6C1_target, c("TS6C1", "TS6C2", "TS6C3", "TS6C4", "TS6C5"), sep = "(?<=.)") %>%
separate(SFC1_target, c("TSFC1", "TSFC2", "TSFC3", "TSFC4", "TSFC5"), sep = "(?<=.)")
})
# Now add segmental info re infants' actual productions to each DF
Vinitial <- sample_IPAtarget %>% filter(stringr::str_detect(ActualCV, "^V")) # DF for looking at V-intial structures only
Cinitial <- sample_IPAtarget %>% filter(stringr::str_detect(ActualCV, "^C")|stringr::str_detect(ActualCV, "^G"))    # DF for looking at C-intial structures only
# Remember to merge these subsets together once DF is organized
sample_IPAactual_loop <- lapply(sample_IPAtarget_loop, FUN = function(element) {
split_syl_Cinit <- element %>% filter(ActualCV %in% Cinitial$ActualCV) %>%
separate(Vremoved_actual, c("S1C1_actual", "S2C1_actual", "S3C1_actual", "S4C1_actual", "S5C1_actual", "S6C1_actual", "SFC1_actual"), "V")
split_clust_Cinit <- split_syl_Cinit %>% separate(S1C1_actual, c("AS1C1", "AS1C2", "AS1C3", "AS1C4", "AS1C5"), sep = "(?<=.)") %>%
separate(S2C1_actual, c("AS2C1", "AS2C2", "AS2C3", "AS2C4", "AS2C5"), sep = "(?<=.)") %>%
separate(S3C1_actual, c("AS3C1", "AS3C2", "AS3C3", "AS3C4", "AS3C5"), sep = "(?<=.)") %>%
separate(S4C1_actual, c("AS4C1", "AS4C2", "AS4C3", "AS4C4", "AS4C5"), sep = "(?<=.)") %>%
separate(S5C1_actual, c("AS5C1", "AS5C2", "AS5C3", "AS5C4", "AS5C5"), sep = "(?<=.)") %>%
separate(S6C1_actual, c("AS6C1", "AS6C2", "AS6C3", "AS6C4", "AS6C5"), sep = "(?<=.)") %>%
separate(SFC1_actual, c("ASFC1", "ASFC2", "ASFC3", "ASFC4", "ASFC5"), sep = "(?<=.)")
split_syl_Vinit <- element %>% filter(ActualCV %in% Vinitial$ActualCV) %>%
separate(Vremoved_actual, c("S1C1_actual", "S2C1_actual", "S3C1_actual", "S4C1_actual", "S5C1_actual", "S6C1_actual", "SFC1_actual"), "V")
split_clust_Vinit <- split_syl_Vinit %>% separate(S1C1_actual, c("AS1C1", "AS1C2", "AS1C3", "AS1C4", "AS1C5"), sep = "(?<=.)") %>%
separate(S2C1_actual, c("AS2C1", "AS2C2", "AS2C3", "AS2C4", "AS2C5"), sep = "(?<=.)") %>%
separate(S3C1_actual, c("AS3C1", "AS3C2", "AS3C3", "AS3C4", "AS3C5"), sep = "(?<=.)") %>%
separate(S4C1_actual, c("AS4C1", "AS4C2", "AS4C3", "AS4C4", "AS4C5"), sep = "(?<=.)") %>%
separate(S5C1_actual, c("AS5C1", "AS5C2", "AS5C3", "AS5C4", "AS5C5"), sep = "(?<=.)") %>%
separate(S6C1_actual, c("AS6C1", "AS6C2", "AS6C3", "AS6C4", "AS6C5"), sep = "(?<=.)") %>%
separate(SFC1_actual, c("ASFC1", "ASFC2", "ASFC3", "ASFC4", "ASFC5"), sep = "(?<=.)")
sample_IPA_CVinit <- rbind(split_clust_Vinit, split_clust_Cinit)
})
actual_target_IPA_FULL <- do.call(rbind.data.frame, sample_IPAactual_loop)
#########
# The new DF has 193681 observations, compared with 193685 in the original sample: investigate missing items
#comparison_sample <- FULLsample %>% dplyr::select(ID, Speaker, Session, Gloss, IPAtarget, IPAactual, IPAtarget, IPAactual, nsyl_target, nsyl_actual,TargetCV, ActualCV)
comparison_final <- actual_target_IPA_FULL %>% dplyr::select(ID,
Speaker,
Session,
Gloss,
IPAtarget,
IPAactual,
nsyl_target,
nsyl_actual,
Targetphon,
Actualphon,
TargetCV,
ActualCV,
TargetCV_edited,
ActualCV_edited
)
# install.packages("stringi")
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("tibble")
# install.packages("ggpubr")
# install.packages("lmerTest")
# install.packages("papaja")
# install.packages("tidyverse")
# install.packages("dplyr")
# install.packages("tibble")
# install.packages("afex")
# install.packages("citr")
# install.packages("glmmTMB")
# install.packages("janitor")
#install.packages("linguisticsdown")
#install.packages("ggraph")
#install.packages("wesanderson")
# install.packages("effects")
library(tidyverse)
library(stringi)
library(stringr)
library(ggplot2)
library(tibble)
library(lmerTest)
library(papaja)
library(tidyverse)
library(dplyr)
#library(citr)
library(feather)
library(ggthemes)
#library(effects)
library(nlme)
library(glmmTMB)
library(broom)
library(kableExtra)
library(knitr)
library(interactions)
library(janitor)
library(ggraph)
library(data.table)
library(linguisticsdown)
library(ggridges)
library(wesanderson)
library(igraph)
# Updated 3rd November 2022
# This data takes the sample generated in data_cleaning.R and creates a series of phonetic distance values for each word in the dataframe
FULLsample <- feather::read_feather("Data/FULLsample_Providence.feather")
FULLsample$Session <- gsub("^[^.]*.", "", FULLsample$Session) # create variable to show session number in only numeric form
FULLsample$Session <- gsub('[\a\b]', '', FULLsample$Session)
# write_csv(FULLsample, "ProvidenceDataCHI.csv")
sample_IPAtarget <- FULLsample %>% select(ID, Speaker, Session, Gloss,
IPAtarget, IPAactual,
Targetphon, Actualphon,
TargetCV, ActualCV) # Create new dataframe to generate IPA segmental values
# substitute all target vowels for generic V because I don't care about vowels
sample_IPAtarget$Vremoved_target <- gsub("([
i
u
ɪ
ʊ
e
o
ə
ɛ
ʌ
ɔ
ɜ
æ
a
ɑ])", "V", sample_IPAtarget$IPAtarget)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPAtarget$Vremoved_target <- gsub("VVV", "V", sample_IPAtarget$Vremoved_target)  # remove triphthongs to count as single vowel (following Monaghan et al 2010 but also because we're not looking at vowels here)
sample_IPAtarget$Vremoved_target <- gsub("VV", "V", sample_IPAtarget$Vremoved_target)  # remove diphthongs to count as single vowel (following Monaghan et al 2010 but also because we're not looking at vowels here)
sample_IPAtarget <- sample_IPAtarget %>% mutate(nsyl_target = stringr::str_count(Vremoved_target, "V"),
nsyl_target = ifelse(nsyl_target == 0, 1, nsyl_target))
# substitute all actual vowels for generic V because I don't care about vowels here either
sample_IPAtarget$Vremoved_actual <- gsub("([
i
u
ɪ
ʊ
e
o
ə
ɛ
ʌ
ɔ
ɜ
æ
a
ɑ])", "V", sample_IPAtarget$IPAactual)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPAtarget$Vremoved_actual <- gsub("VVV", "V", sample_IPAtarget$Vremoved_actual)
sample_IPAtarget$Vremoved_actual <- gsub("VV", "V", sample_IPAtarget$Vremoved_actual)
sample_IPAtarget <- sample_IPAtarget %>% mutate(nsyl_actual = stringr::str_count(Vremoved_actual, "V"),
nsyl_actual = ifelse(nsyl_actual == 0, 1, nsyl_actual))
# Now split data by syllable structures since difference structures need treating differently when running a segment-by-segment comparison
# Create a new dataframe to gather this info, to be joined to sample_IPAtarget later
target_structures_sample <- as.data.frame(levels(sample_IPAtarget$TargetCV)) # list all structures in the data
target_structures_sample <- target_structures_sample %>%
rename("TargetCV" = `levels(sample_IPAtarget$TargetCV)`)
# Create a new column that simplifies each structure by its 'core' syllabic properties
target_structures_sample$TargetCV_edited <- gsub("VVVV", "V", target_structures_sample$TargetCV)
target_structures_sample$TargetCV_edited <- gsub("VVV", "V", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("VV", "V", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("G", "C", target_structures_sample$TargetCV_edited)  # counting glides as consonants, consistent with above
target_structures_sample$TargetCV_edited <- gsub("CCCC", "C", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("CCC", "C", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("CC", "C", target_structures_sample$TargetCV_edited)
target_structures_sample$TargetCV_edited <- gsub("^", "", target_structures_sample$TargetCV_edited)
target_structures_sample <- target_structures_sample %>%
mutate(TargetCV_edited = as.factor(TargetCV_edited))
# Do the same for actual syllabic structure. This will allow for comparison of targetlikeness later on
sample_IPAtarget$ActualCV_edited <- gsub("VVVV", "V", sample_IPAtarget$ActualCV)
sample_IPAtarget$ActualCV_edited <- gsub("VVV", "V", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("VV", "V", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("G", "C", sample_IPAtarget$ActualCV_edited)  # counting glides as consonants, consistent with above
sample_IPAtarget$ActualCV_edited <- gsub("CCCC", "C", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("CCC", "C", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("CC", "C", sample_IPAtarget$ActualCV_edited)
sample_IPAtarget$ActualCV_edited <- gsub("^", "", sample_IPAtarget$ActualCV_edited)
#levels(target_structures$structure_edited)
# create two new columns that alongside sample_IPAtarget$nsyl_target together will allow for filtering of specific word structures across the data
# openclosed = does the target form have a coda? (yes = closed, no = open)
# onset = is it a vowel (V) or consonant (C) at word onset?
target_structures_sample <- target_structures_sample %>%
mutate(openclosed = ifelse(TargetCV_edited %in% c("C", "CVC", "VC", "CVCVC", "VCVC", "CVCVC^CVC", "CVCVCVC", "VCVCVC",
"CVCVCVCVC", "VCVCVCVC", "CVCVCVCVCVC", "VCVCVCVCVC", "CVCVCVCVCVCVC"), "closed", "open"),
onset = ifelse(TargetCV_edited %in% c("V", "V^CV", "VC", "VCV", "VCVC", "VCVCV", "VCVCVC", "VCVCVCV", "VCVCVCVC",
"VCVCVCVCV", "VCVCVCVCVC", "VCVCVCVCVCV"), "V", "C"))
sample_IPAtarget <- sample_IPAtarget %>% left_join(target_structures_sample) # join with main dataframe
ggplot(sample_IPAtarget, aes(x = nsyl_target)) + geom_histogram(binwidth = 0.5)  +
scale_y_sqrt()
ggplot(sample_IPAtarget, aes(x = nsyl_actual)) + geom_histogram(binwidth = 0.5)  +
scale_y_sqrt()
sample_IPAtarget %>% group_by(nsyl_actual) %>% tally()
1547/147988 #1% 3 syls
# Now each segment of each word needs to be separated in order to compare target forms with actual productions
# This process is done by syllable number, starting with target forms and then considering actual forms in relation to these
# For example: monosyllabic target /kat/ is separated into /k/~/a/~/t/ and then child's actual production is considered in relation to this
# Actual production might be a monosyllable ([kat]), or a disyllable [kaka] or multisyllabic [kakaka]. In each of these cases, /k/~/a/~/t/ as generated below
# is compared against the segments from the actual form
# First all target monosyllables are compared with all target forms (from 1-6 syllables, V- and C-intial separately)
# Then disyllables (compared with 1-6 syllable forms, V- and C-initial), trisyllables, etc. up to 6-syllable words
# Words beyond 6 syllables tended to be produced with vocal play, and so were excluded from the analysis
nsyl_target_list <- sample_IPAtarget %>%
split(., f = .$nsyl_target)
sample_IPAtarget_loop <- lapply(nsyl_target_list, FUN = function(element) {
split_syl <- element %>% separate(Vremoved_target, c("S1C1_target", "S2C1_target", "S3C1_target", "S4C1_target", "S5C1_target", "S6C1_target", "SFC1_target"), "V")
split_clust <- split_syl %>% separate(S1C1_target, c("TS1C1", "TS1C2", "TS1C3", "TS1C4", "TS1C5"), sep = "(?<=.)") %>%
separate(S2C1_target, c("TS2C1", "TS2C2", "TS2C3", "TS2C4", "TS2C5"), sep = "(?<=.)") %>%
separate(S3C1_target, c("TS3C1", "TS3C2", "TS3C3", "TS3C4", "TS3C5"), sep = "(?<=.)") %>%
separate(S4C1_target, c("TS4C1", "TS4C2", "TS4C3", "TS4C4", "TS4C5"), sep = "(?<=.)") %>%
separate(S5C1_target, c("TS5C1", "TS5C2", "TS5C3", "TS5C4", "TS5C5"), sep = "(?<=.)") %>%
separate(S6C1_target, c("TS6C1", "TS6C2", "TS6C3", "TS6C4", "TS6C5"), sep = "(?<=.)") %>%
separate(SFC1_target, c("TSFC1", "TSFC2", "TSFC3", "TSFC4", "TSFC5"), sep = "(?<=.)")
})
# Now add segmental info re infants' actual productions to each DF
Vinitial <- sample_IPAtarget %>% filter(stringr::str_detect(ActualCV, "^V")) # DF for looking at V-intial structures only
Cinitial <- sample_IPAtarget %>% filter(stringr::str_detect(ActualCV, "^C")|stringr::str_detect(ActualCV, "^G"))    # DF for looking at C-intial structures only
# Remember to merge these subsets together once DF is organized
sample_IPAactual_loop <- lapply(sample_IPAtarget_loop, FUN = function(element) {
split_syl_Cinit <- element %>% filter(ActualCV %in% Cinitial$ActualCV) %>%
separate(Vremoved_actual, c("S1C1_actual", "S2C1_actual", "S3C1_actual", "S4C1_actual", "S5C1_actual", "S6C1_actual", "SFC1_actual"), "V")
split_clust_Cinit <- split_syl_Cinit %>% separate(S1C1_actual, c("AS1C1", "AS1C2", "AS1C3", "AS1C4", "AS1C5"), sep = "(?<=.)") %>%
separate(S2C1_actual, c("AS2C1", "AS2C2", "AS2C3", "AS2C4", "AS2C5"), sep = "(?<=.)") %>%
separate(S3C1_actual, c("AS3C1", "AS3C2", "AS3C3", "AS3C4", "AS3C5"), sep = "(?<=.)") %>%
separate(S4C1_actual, c("AS4C1", "AS4C2", "AS4C3", "AS4C4", "AS4C5"), sep = "(?<=.)") %>%
separate(S5C1_actual, c("AS5C1", "AS5C2", "AS5C3", "AS5C4", "AS5C5"), sep = "(?<=.)") %>%
separate(S6C1_actual, c("AS6C1", "AS6C2", "AS6C3", "AS6C4", "AS6C5"), sep = "(?<=.)") %>%
separate(SFC1_actual, c("ASFC1", "ASFC2", "ASFC3", "ASFC4", "ASFC5"), sep = "(?<=.)")
split_syl_Vinit <- element %>% filter(ActualCV %in% Vinitial$ActualCV) %>%
separate(Vremoved_actual, c("S1C1_actual", "S2C1_actual", "S3C1_actual", "S4C1_actual", "S5C1_actual", "S6C1_actual", "SFC1_actual"), "V")
split_clust_Vinit <- split_syl_Vinit %>% separate(S1C1_actual, c("AS1C1", "AS1C2", "AS1C3", "AS1C4", "AS1C5"), sep = "(?<=.)") %>%
separate(S2C1_actual, c("AS2C1", "AS2C2", "AS2C3", "AS2C4", "AS2C5"), sep = "(?<=.)") %>%
separate(S3C1_actual, c("AS3C1", "AS3C2", "AS3C3", "AS3C4", "AS3C5"), sep = "(?<=.)") %>%
separate(S4C1_actual, c("AS4C1", "AS4C2", "AS4C3", "AS4C4", "AS4C5"), sep = "(?<=.)") %>%
separate(S5C1_actual, c("AS5C1", "AS5C2", "AS5C3", "AS5C4", "AS5C5"), sep = "(?<=.)") %>%
separate(S6C1_actual, c("AS6C1", "AS6C2", "AS6C3", "AS6C4", "AS6C5"), sep = "(?<=.)") %>%
separate(SFC1_actual, c("ASFC1", "ASFC2", "ASFC3", "ASFC4", "ASFC5"), sep = "(?<=.)")
sample_IPA_CVinit <- rbind(split_clust_Vinit, split_clust_Cinit)
})
actual_target_IPA_FULL <- do.call(rbind.data.frame, sample_IPAactual_loop)
#########
# The new DF has 193681 observations, compared with 193685 in the original sample: investigate missing items
#comparison_sample <- FULLsample %>% dplyr::select(ID, Speaker, Session, Gloss, IPAtarget, IPAactual, IPAtarget, IPAactual, nsyl_target, nsyl_actual,TargetCV, ActualCV)
comparison_final <- actual_target_IPA_FULL %>% dplyr::select(ID,
Speaker,
Session,
Gloss,
IPAtarget,
IPAactual,
nsyl_target,
nsyl_actual,
Targetphon,
Actualphon,
TargetCV,
ActualCV,
TargetCV_edited,
ActualCV_edited
)
View(comparison_final)
distinctive.feature.matrix <- tribble(~Symbol, ~Sonorant, ~Consonantal, ~Voice, ~Nasal, ~Degree, ~Labial, ~Palatal, ~Pharyngeal, ~Round, ~Tongue, ~Radical,
"p", -1, 1, -1, -1, 1, 1, 0, -1, 1, 0, 0,
"b", -1, 1, 0, -1, 1, 1, 0, -1, 1, 0, 0,
"t", -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 0,
"d", -1, 1, 0, -1, 1, -1, 1, -1, -1, 1, 0,
"k", -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 0,
"ɡ", -1, 1, 0, -1, 1, -1, -1, -1, -1, -1, 0,
"f", -0.5, 1, -1, -1, 0, -1, 1, -1, 1, 0, 0,
"v", -0.5, 1, 0, -1, 0, -1, 1, -1, 1, 0, 0,
"θ", -0.5, 1, -1, -1, 0, -1, 1, -1, -1, 0, 0,
"ð", -0.5, 1, 0, -1, 0, -1, 1, -1, -1, 0, 0,
"s", -0.5, 1, -1, -1, 0, -1, 1, -1, -1, 1, 0,
"c", -0.5, 1, 0, -1, 0, -1, 1, -1, -1, -1, 0,   # infants produce /c/ in some instances, though this doesn't occur in target forms
"z", -0.5, 1, 0, -1, 0, -1, 1, -1, -1, 1, 0,
"h", -0.5, 1, 0, -1, 0, -1, -1, 1, -1, -1, -1,
"ʃ", -0.5, 1, -1, -1, 0, -1, 0, -1, -1, 0, 0,
"ʒ", -0.5, 1, 0, -1, 0, -1, 0, -1, -1, 0, 0,
"ʧ", -0.8, 1, -1, -1, 1, -1, 0, -1, -1, 0, 0,
"ʤ", -0.8, 1, 0, -1, 1, -1, 0, -1, -1, 0, 0,
"m", 0, 0, 1, 1, 1, 1, 0, -1, 1, 0, 0,
"n", 0, 0, 1, 1, 1, -1, 1, -1, -1, 1, 0,
"ŋ", 0, 0, 1, 1, 1, -1, -1, -1, -1, -1, 0,
"ɹ", 0.5, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1,
"r", 0.5, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1,   # some rhotics in the data are coded as /r/
"l", 0.5, 0, 1, 0, -1, -1, 1, -1, -1, 1, 0,
"w", 0.8, 0, 1, 0, 0, 1, -1, -1, 1, -1, 0,
"j", 0.8, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1,
"ɾ", 0.5, 1, 1, 0, -1, -1, -1, 1, -1, 1, 0,
"ʙ", -0.5, 1, 0, -1, 1, 1, 0, -1, 1, 0, 0,
"ʔ", -1, 0, 0, -1, 0, -1, -1, 1, -1, 1, 0)    # added manually as not defined in original. Drew from Cambridge Handboo of Phonology and
colnames_target <- actual_target_IPA_FULL %>% dplyr::select(ID, starts_with("TS"))
colnames(colnames_target) <- sub("T","",colnames(colnames_target))
target_list <- setNames(lapply(names(colnames_target)[-1], function(x) cbind(colnames_target[1], colnames_target[x])), names(colnames_target)[-1])
output_target <- lapply(target_list, FUN = function(element) {
target_segment <- data.frame(element,
distinctive.feature.matrix[match(element[,2], distinctive.feature.matrix$Symbol), 2:12],
stringsAsFactors=FALSE) %>%
replace(is.na(.), 0) %>%
mutate(data_type = "Target")
})
colnames_actual <- actual_target_IPA_FULL %>% dplyr::select(ID, starts_with("AS"))
colnames(colnames_actual) <- sub("A","",colnames(colnames_actual))
actual_list <- setNames(lapply(names(colnames_actual)[-1], function(x) cbind(colnames_actual[1], colnames_actual[x])), names(colnames_actual)[-1])
output_actual <- lapply(actual_list, FUN = function(element) {
target_segment <- data.frame(element,
distinctive.feature.matrix[match(element[,2], distinctive.feature.matrix$Symbol), 2:12],
stringsAsFactors=FALSE)  %>%
replace(is.na(.), 0) %>%
mutate(data_type = "Actual")
})
output_full <- mapply(rbind,output_target,output_actual,SIMPLIFY=FALSE) # below I'll convert this into a DF for generating the global matrix
output_full_dist <- lapply(output_full, FUN = function(element) {
target <- element %>% filter(data_type == "Target")
actual <- element %>% filter(data_type == "Actual")
sonorant_df <- actual %>% mutate(sonorant_diff = (actual$Sonorant - target$Sonorant)^2)
consonantal_df <- actual %>% mutate(consonantal_diff = (actual$Consonantal - target$Consonantal)^2)
voice_df <- actual %>% mutate(voice_diff = (actual$Voice - target$Voice)^2)
nasal_df <- actual %>% mutate(nasal_diff = (actual$Nasal - target$Nasal)^2)
degree_df <- actual %>% mutate(degree_diff = (actual$Degree - target$Degree)^2)
labial_df <- actual %>% mutate(labial_diff = (actual$Labial - target$Labial)^2)
palatal_df <- actual %>% mutate(palatal_diff = (actual$Palatal - target$Palatal)^2)
pharyngeal_df <- actual %>% mutate(pharyngeal_diff = (actual$Pharyngeal - target$Pharyngeal)^2)
round_df <- actual %>% mutate(round_diff = (actual$Round - target$Round)^2)
tongue_df <- actual %>% mutate(tongue_diff = (actual$Tongue - target$Tongue)^2)
radical_df <- actual %>% mutate(radical_diff = (actual$Radical - target$Radical)^2)
element_dist <- actual %>% mutate(final_dist =
sqrt(sonorant_df$sonorant_diff +
consonantal_df$consonantal_diff +
voice_df$voice_diff +
nasal_df$nasal_diff +
degree_df$degree_diff +
labial_df$labial_diff +
palatal_df$palatal_diff +
pharyngeal_df$pharyngeal_diff +
round_df$round_diff +
tongue_df$tongue_diff +
radical_df$radical_diff))
# element_dist_final <- element_dist %>% dplyr::select(-Sonorant, -Consonantal, - Voice, -Nasal, -Degree, -Labial, -Palatal, -Pharyngeal, -Round, -Tongue, -Radical)
})
dist_final_df <- as.data.frame(output_full_dist)
colnames(dist_final_df)[1] <- "unique"
dist_final <- dist_final_df %>% dplyr::select(unique, -ends_with("data_type") & -ends_with(".ID") & -!contains("final_dist")) %>%
mutate(distance = rowSums(.[2:25])) %>%
dplyr::select(unique, distance) %>%
rename("ID" = "unique")
comparison_data <- comparison_final %>% left_join(dist_final)
View(comparison_data)
comparison_data$years <- stri_sub(comparison_data$Session, 1, 2)
comparison_data$months <- stri_sub(comparison_data$Session, 3, 4)
comparison_data$days <- stri_sub(comparison_data$Session, 5, 6)
comparison_data <- comparison_data %>%
mutate(years = as.numeric(years),
months = as.numeric(months),
days = as.numeric(days),
age = (years*12) + months) %>%
dplyr::select(-years, -months, -days)
session_data <- comparison_data %>% group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
comparison_data <- comparison_data %>%
left_join(session_data) %>%
filter(!is.na(session_ordinal)) %>%
mutate(session_ordinal = as.numeric(session_ordinal))
View(comparison_data)
write_csv(comparison_data, "Data/comparison_data_Providence.csv")
