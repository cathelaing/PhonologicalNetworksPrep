FULLsample <- feather::read_feather("Data/FULLsample.feather")
FULLsample$Session <- gsub("^[^.]*.", "", FULLsample$Session) # create variable to show session number in only numeric form
FULLsample$Session <- gsub('[\a\b]', '', FULLsample$Session)
sample_IPAtarget <- FULLsample %>% select(ID, Speaker, Session, Gloss,
IPAtarget, IPAactual,
Targetphon, Actualphon,
TargetCV, ActualCV) # Create new dataframe to generate IPA segmental values
# substitute all target vowels for generic V because I don't care about vowels
sample_IPAtarget$Vremoved_target <- gsub("([
^
i
u
Éª
Ê
e
o
É
É
Ê
É
É
Ã¦
a
É])", "", sample_IPAtarget$IPAtarget)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPAtarget <- FULLsample %>% select(ID, Speaker, Session, Gloss,
IPAtarget, IPAactual,
Targetphon, Actualphon,
TargetCV, ActualCV) # Create new dataframe to generate IPA segmental values
# install.packages("stringi")
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("tibble")
# install.packages("ggpubr")
# install.packages("lmerTest")
# install.packages("papaja")
# install.packages("tidyverse")
# install.packages("dplyr")
# install.packages("tibble")
# install.packages("afex")
# install.packages("citr")
# install.packages("glmmTMB")
# install.packages("janitor")
#install.packages("linguisticsdown")
#install.packages("ggraph")
#install.packages("wesanderson")
# install.packages("effects")
library(tidyverse)
library(stringi)
library(stringr)
library(ggplot2)
library(tibble)
library(lmerTest)
library(papaja)
library(tidyverse)
library(dplyr)
#library(citr)
library(feather)
library(ggthemes)
#library(effects)
library(nlme)
library(glmmTMB)
library(broom)
library(kableExtra)
library(knitr)
library(interactions)
library(janitor)
library(ggraph)
library(data.table)
library(linguisticsdown)
library(ggridges)
library(wesanderson)
FULLsample <- feather::read_feather("Data/FULLsample.feather")
FULLsample$Session <- gsub("^[^.]*.", "", FULLsample$Session) # create variable to show session number in only numeric form
FULLsample$Session <- gsub('[\a\b]', '', FULLsample$Session)
sample_IPAtarget <- FULLsample %>% select(ID, Speaker, Session, Gloss,
IPAtarget, IPAactual,
Targetphon, Actualphon,
TargetCV, ActualCV) # Create new dataframe to generate IPA segmental values
# substitute all target vowels for generic V because I don't care about vowels
sample_IPAtarget$Vremoved_target <- gsub("([
^
i
u
Éª
Ê
e
o
É
É
Ê
É
É
Ã¦
a
É])", "", sample_IPAtarget$IPAtarget)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPAtarget$Vremoved_actual <- gsub("([
^
i
u
Éª
Ê
e
o
É
É
Ê
É
É
Ã¦
a
É])", "", sample_IPAtarget$IPAactual)    # vowels taken from runnng Phone Inventory script in Phon
sample_IPA_segments <- sample_IPAtarget %>%
mutate(segments_actual = str_length(Vremoved_actual),
segments_target = str_length(Vremoved_target)) %>%
filter(segments_actual < 9 & segments_actual != 0 & segments_target != 0)
nseg_target_list <- sample_IPA_segments %>%
split(., f = .$Vremoved_target)
sample_IPAtarget_loop <- lapply(nseg_target_list, FUN = function(element) {
split_syl <- element %>% separate(Vremoved_target, c("C1T", "C2T", "C3T", "C4T", "C5T", "C6T", "C7T", "C8T"), sep = "(?<=.)")
})
sample_IPAactual_loop <- lapply(sample_IPAtarget_loop, FUN = function(element) {
split_syl <- element %>% separate(Vremoved_actual, c("C1A", "C2A", "C3A", "C4A", "C5A", "C6A", "C7A", "C8A"), sep = "(?<=.)")
})
actual_target_segments_FULL <- do.call(rbind.data.frame, sample_IPAactual_loop)
distinctive.feature.matrix <- tribble(~Symbol, ~Sonorant, ~Consonantal, ~Voice, ~Nasal, ~Degree, ~Labial, ~Palatal, ~Pharyngeal, ~Round, ~Tongue, ~Radical,
"p", -1, 1, -1, -1, 1, 1, 0, -1, 1, 0, 0,
"b", -1, 1, 0, -1, 1, 1, 0, -1, 1, 0, 0,
"t", -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 0,
"d", -1, 1, 0, -1, 1, -1, 1, -1, -1, 1, 0,
"k", -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 0,
"É¡", -1, 1, 0, -1, 1, -1, -1, -1, -1, -1, 0,
"f", -0.5, 1, -1, -1, 0, -1, 1, -1, 1, 0, 0,
"v", -0.5, 1, 0, -1, 0, -1, 1, -1, 1, 0, 0,
"Î¸", -0.5, 1, -1, -1, 0, -1, 1, -1, -1, 0, 0,
"Ã°", -0.5, 1, 0, -1, 0, -1, 1, -1, -1, 0, 0,
"s", -0.5, 1, -1, -1, 0, -1, 1, -1, -1, 1, 0,
"c", -0.5, 1, 0, -1, 0, -1, 1, -1, -1, -1, 0,   # infants produce /c/ in some instances, though this doesn't occur in target forms
"z", -0.5, 1, 0, -1, 0, -1, 1, -1, -1, 1, 0,
"h", -0.5, 1, 0, -1, 0, -1, -1, 1, -1, -1, -1,
"Ê", -0.5, 1, -1, -1, 0, -1, 0, -1, -1, 0, 0,
"Ê", -0.5, 1, 0, -1, 0, -1, 0, -1, -1, 0, 0,
"Ê§", -0.8, 1, -1, -1, 1, -1, 0, -1, -1, 0, 0,
"Ê¤", -0.8, 1, 0, -1, 1, -1, 0, -1, -1, 0, 0,
"m", 0, 0, 1, 1, 1, 1, 0, -1, 1, 0, 0,
"n", 0, 0, 1, 1, 1, -1, 1, -1, -1, 1, 0,
"Å", 0, 0, 1, 1, 1, -1, -1, -1, -1, -1, 0,
"É¹", 0.5, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1,
"r", 0.5, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1,   # some rhotics in the data are coded as /r/
"l", 0.5, 0, 1, 0, -1, -1, 1, -1, -1, 1, 0,
"w", 0.8, 0, 1, 0, 0, 1, -1, -1, 1, -1, 0,
"j", 0.8, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1,
"É¾", 0.5, 1, 1, 0, -1, -1, -1, 1, -1, 1, 0,
"Ê", -0.5, 1, 0, -1, 1, 1, 0, -1, 1, 0, 0,
"Ê", -1, 0, 0, -1, 0, -1, -1, 1, -1, 1, 0)    # added manually as not defined in original. Drew from Cambridge Handboo of Phonology and
colnames_target <- actual_target_segments_FULL %>% dplyr::select(ID, ends_with("T"), -ends_with("target"))
colnames(colnames_target) <- sub("T","",colnames(colnames_target))
target_list <- setNames(lapply(names(colnames_target)[-1], function(x) cbind(colnames_target[1], colnames_target[x])), names(colnames_target)[-1])
output_target <- lapply(target_list, FUN = function(element) {
target_segment <- data.frame(element,
distinctive.feature.matrix[match(element[,2], distinctive.feature.matrix$Symbol), 2:12],
stringsAsFactors=FALSE) %>%
replace(is.na(.), 0) %>%
mutate(data_type = "Target")
})
colnames_actual <- actual_target_segments_FULL %>% dplyr::select(ID, ends_with("A"), -ends_with("actual"))
colnames(colnames_actual) <- sub("A","",colnames(colnames_actual))
actual_list <- setNames(lapply(names(colnames_actual)[-1], function(x) cbind(colnames_actual[1], colnames_actual[x])), names(colnames_actual)[-1])
output_actual <- lapply(actual_list, FUN = function(element) {
target_segment <- data.frame(element,
distinctive.feature.matrix[match(element[,2], distinctive.feature.matrix$Symbol), 2:12],
stringsAsFactors=FALSE)  %>%
replace(is.na(.), 0) %>%
mutate(data_type = "Actual")
})
output_full <- mapply(rbind,output_target,output_actual,SIMPLIFY=FALSE) # below I'll convert this into a DF for generating the global matrix
View(output_full)
output_full_dist <- lapply(output_full, FUN = function(element) {
target <- element %>% filter(data_type == "Target")
actual <- element %>% filter(data_type == "Actual")
sonorant_df <- actual %>% mutate(sonorant_diff = (actual$Sonorant - target$Sonorant)^2)
consonantal_df <- actual %>% mutate(consonantal_diff = (actual$Consonantal - target$Consonantal)^2)
voice_df <- actual %>% mutate(voice_diff = (actual$Voice - target$Voice)^2)
nasal_df <- actual %>% mutate(nasal_diff = (actual$Nasal - target$Nasal)^2)
degree_df <- actual %>% mutate(degree_diff = (actual$Degree - target$Degree)^2)
labial_df <- actual %>% mutate(labial_diff = (actual$Labial - target$Labial)^2)
palatal_df <- actual %>% mutate(palatal_diff = (actual$Palatal - target$Palatal)^2)
pharyngeal_df <- actual %>% mutate(pharyngeal_diff = (actual$Pharyngeal - target$Pharyngeal)^2)
round_df <- actual %>% mutate(round_diff = (actual$Round - target$Round)^2)
tongue_df <- actual %>% mutate(tongue_diff = (actual$Tongue - target$Tongue)^2)
radical_df <- actual %>% mutate(radical_diff = (actual$Radical - target$Radical)^2)
element_dist <- actual %>% mutate(final_dist =
sqrt(sonorant_df$sonorant_diff +
consonantal_df$consonantal_diff +
voice_df$voice_diff +
nasal_df$nasal_diff +
degree_df$degree_diff +
labial_df$labial_diff +
palatal_df$palatal_diff +
pharyngeal_df$pharyngeal_diff +
round_df$round_diff +
tongue_df$tongue_diff +
radical_df$radical_diff))
# element_dist_final <- element_dist %>% dplyr::select(-Sonorant, -Consonantal, - Voice, -Nasal, -Degree, -Labial, -Palatal, -Pharyngeal, -Round, -Tongue, -Radical)
})
View(output_full_dist)
dist_final_df <- as.data.frame(output_full_dist)
View(dist_final_df)
