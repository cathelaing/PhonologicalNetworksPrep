select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`16`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop) %>%
mutate(gloss1 = str_trim(gloss1))
input_freq <- read_csv("additional_files/childes_french.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_lyon.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
word_cat <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
distinct(Gloss, .keep_all = T) %>%
dplyr::select(Gloss, category) %>%
rename("gloss1" = "Gloss") %>%
mutate(category = as.factor(category),
category = fct_collapse(category,
object_word = c("animals", "body_parts", "clothing", "food_drink", "furniture_rooms",
"household", "people", "outside", "places", "toys", "vehicles"),
verbs = c("action_words", "helping_verbs")))
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
# left_join(word_cat) %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n")   # how many tokens of each word included in the data
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data) %>%
mutate(total_freq = ifelse(is.na(total_freq), 0, total_freq)) %>%
mutate(freq_scaled = c(scale(total_freq, center = TRUE, scale = TRUE)),
vocab_scaled = c(scale(vocab_agg, center = TRUE, scale = TRUE)),
tokens_scaled = c(scale(n_tokens, center = TRUE, scale = TRUE))) %>%
mutate(corpus = "French",
age_scaled = c(scale(age, center = T, scale = T)),
category = as.factor(category),
data_type = as.factor(data_type),
Speaker = as.factor(Speaker),
corpus = as.factor(corpus))
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
rename("INT_val" = "PAT_val",
"INT_val_m" = "PAT_val_m") %>%
group_by(Speaker, gloss1, data_type) %>%
mutate(learned_next = ifelse(age == AOP-1, 1, 0)) %>%
filter(age != AOP) %>%
left_join(comparison_data) %>%
left_join(vocabsize_lyon) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE)),
INT_weighted = INT_val/vocab_agg,
EXT_weighted = EXT_target/vocab_agg) %>%
group_by(Speaker, age) %>%
mutate(INT_scaled = c(scale(INT_val, center = TRUE, scale = TRUE)),
INT_scaled_m = c(scale(INT_val_m, center = TRUE, scale = TRUE)),
INT_vocab_scaled = c(scale(INT_weighted, center = TRUE, scale = TRUE)),
EXT_vocab_scaled = c(scale(EXT_weighted, center = T, scale = T)),
EXT_scaled_target = c(scale(EXT_target, center = TRUE, scale = TRUE)),
EXT_scaled_actual = c(scale(EXT_actual, center = TRUE, scale = TRUE))) %>%
ungroup() %>%
mutate(gloss1 = str_trim(gloss1),
gloss1 = ifelse(gloss1 == "balanàçoire", "balançoire", gloss1))
#regression_data %>% filter(is.na(EXT_target))
aoa_comp <- read_csv("additional_files/wordbank_item_data_comp_fr.csv") %>%
select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`16`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop) %>%
mutate(gloss1 = str_trim(gloss1))
input_freq <- read_csv("additional_files/childes_french.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_lyon.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
# freq_lyon <- read_csv("Data/freq_lyon.csv") %>%
#   mutate(Speaker = ifelse(Speaker == "Theotime", "Tim", Speaker))
# chi_freq_bychi <- read_csv("Data/chi_freq_bychi.csv")
# chi_freq_byword <- read_csv("Data/chi_freq_byword.csv")
word_cat <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
distinct(Gloss, .keep_all = T) %>%
dplyr::select(Gloss, category) %>%
rename("gloss1" = "Gloss") %>%
mutate(category = as.factor(category),
category = fct_collapse(category,
object_word = c("animals", "body_parts", "clothing", "food_drink", "furniture_rooms",
"household", "people", "outside", "places", "toys", "vehicles"),
verbs = c("action_words", "helping_verbs")))
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
# left_join(word_cat) %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n")   # how many tokens of each word included in the data
regression_data <- regression_data %>%
#left_join(input_freq, by = "gloss1") %>%
#left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1")
aoa_comp %>% group_by(gloss1) %>% tally() %>% filter(n>1)
aoa_comp <- read_csv("additional_files/wordbank_item_data_comp_eng.csv") %>%
select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`18`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop) %>%
distinct(gloss1, .keep_all = T) # parc and poisson occur twice with the same aoa
aoa_comp %>% group_by(gloss1) %>% tally() %>% filter(n>1)
input_freq <- read_csv("additional_files/childes_english.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_providence.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
group_by(Speaker, gloss1, data_type) %>%
rename("INT_val" = "PAT_val",
"INT_val_m" = "PAT_val_m") %>%
mutate(learned_next = ifelse(age == AOP-1, 1, 0)) %>%
filter(age != AOP) %>%
left_join(comparison_data) %>%
left_join(vocabsize_providence) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE)),
INT_weighted = INT_val/vocab_agg,
EXT_weighted = EXT_target/vocab_agg) %>%
group_by(Speaker, age) %>%
mutate(INT_scaled = c(scale(INT_val, center = TRUE, scale = TRUE)),
INT_scaled_m = c(scale(INT_val_m, center = TRUE, scale = TRUE)),
INT_vocab_scaled = c(scale(INT_weighted, center = TRUE, scale = TRUE)),
EXT_vocab_scaled = c(scale(EXT_weighted, center = T, scale = T)),
EXT_scaled_target = c(scale(EXT_target, center = TRUE, scale = TRUE)),
EXT_scaled_actual = c(scale(EXT_actual, center = TRUE, scale = TRUE))) %>%
ungroup()
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
rename("INT_val" = "PAT_val",
"INT_val_m" = "PAT_val_m") %>%
group_by(Speaker, gloss1, data_type) %>%
mutate(learned_next = ifelse(age == AOP-1, 1, 0)) %>%
filter(age != AOP) %>%
left_join(comparison_data) %>%
left_join(vocabsize_lyon) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE)),
INT_weighted = INT_val/vocab_agg,
EXT_weighted = EXT_target/vocab_agg) %>%
group_by(Speaker, age) %>%
mutate(INT_scaled = c(scale(INT_val, center = TRUE, scale = TRUE)),
INT_scaled_m = c(scale(INT_val_m, center = TRUE, scale = TRUE)),
INT_vocab_scaled = c(scale(INT_weighted, center = TRUE, scale = TRUE)),
EXT_vocab_scaled = c(scale(EXT_weighted, center = T, scale = T)),
EXT_scaled_target = c(scale(EXT_target, center = TRUE, scale = TRUE)),
EXT_scaled_actual = c(scale(EXT_actual, center = TRUE, scale = TRUE))) %>%
ungroup() %>%
mutate(gloss1 = str_trim(gloss1),
gloss1 = ifelse(gloss1 == "balanàçoire", "balançoire", gloss1))
aoa_comp <- read_csv("additional_files/wordbank_item_data_comp_fr.csv") %>%
select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`16`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop) %>%
mutate(gloss1 = str_trim(gloss1)) %>%
distinct(gloss1, .keep_all = T) # parc and poisson occur twice with the same
input_freq <- read_csv("additional_files/childes_french.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_lyon.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
word_cat <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
distinct(Gloss, .keep_all = T) %>%
dplyr::select(Gloss, category) %>%
rename("gloss1" = "Gloss") %>%
mutate(category = as.factor(category),
category = fct_collapse(category,
object_word = c("animals", "body_parts", "clothing", "food_drink", "furniture_rooms",
"household", "people", "outside", "places", "toys", "vehicles"),
verbs = c("action_words", "helping_verbs")))
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
# left_join(word_cat) %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n")   # how many tokens of each word included in the data
regression_data <- regression_data %>%
#left_join(input_freq, by = "gloss1") %>%
#left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1")
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
rename("INT_val" = "PAT_val",
"INT_val_m" = "PAT_val_m") %>%
group_by(Speaker, gloss1, data_type) %>%
mutate(learned_next = ifelse(age == AOP-1, 1, 0)) %>%
filter(age != AOP) %>%
left_join(comparison_data) %>%
left_join(vocabsize_lyon) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE)),
INT_weighted = INT_val/vocab_agg,
EXT_weighted = EXT_target/vocab_agg) %>%
group_by(Speaker, age) %>%
mutate(INT_scaled = c(scale(INT_val, center = TRUE, scale = TRUE)),
INT_scaled_m = c(scale(INT_val_m, center = TRUE, scale = TRUE)),
INT_vocab_scaled = c(scale(INT_weighted, center = TRUE, scale = TRUE)),
EXT_vocab_scaled = c(scale(EXT_weighted, center = T, scale = T)),
EXT_scaled_target = c(scale(EXT_target, center = TRUE, scale = TRUE)),
EXT_scaled_actual = c(scale(EXT_actual, center = TRUE, scale = TRUE))) %>%
ungroup() %>%
mutate(gloss1 = str_trim(gloss1),
gloss1 = ifelse(gloss1 == "balanàçoire", "balançoire", gloss1))
#regression_data %>% filter(is.na(EXT_target))
aoa_comp <- read_csv("additional_files/wordbank_item_data_comp_fr.csv") %>%
select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`16`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop) %>%
mutate(gloss1 = str_trim(gloss1)) %>%
distinct(gloss1, .keep_all = T) # parc and poisson occur twice with the same
input_freq <- read_csv("additional_files/childes_french.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_lyon.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
# freq_lyon <- read_csv("Data/freq_lyon.csv") %>%
#   mutate(Speaker = ifelse(Speaker == "Theotime", "Tim", Speaker))
# chi_freq_bychi <- read_csv("Data/chi_freq_bychi.csv")
# chi_freq_byword <- read_csv("Data/chi_freq_byword.csv")
word_cat <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
distinct(Gloss, .keep_all = T) %>%
dplyr::select(Gloss, category) %>%
rename("gloss1" = "Gloss") %>%
mutate(category = as.factor(category),
category = fct_collapse(category,
object_word = c("animals", "body_parts", "clothing", "food_drink", "furniture_rooms",
"household", "people", "outside", "places", "toys", "vehicles"),
verbs = c("action_words", "helping_verbs")))
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
# left_join(word_cat) %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n")   # how many tokens of each word included in the data
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data)
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data) %>%
mutate(aoa_comp = as.numeric(aoa_comp),
freq_scaled = c(scale(word_count, center = TRUE, scale = TRUE)),
vocab_scaled = c(scale(vocab_agg, center = TRUE, scale = TRUE)),
tokens_scaled = c(scale(n_tokens, center = TRUE, scale = TRUE)),
aoa_scaled = c(scale(aoa_comp, center= TRUE, scale = TRUE))) %>%
mutate(corpus = "French",
age_scaled = c(scale(age, center = T, scale = T)),
category = as.factor(category),
data_type = as.factor(data_type),
Speaker = as.factor(Speaker),
corpus = as.factor(corpus))
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data)
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
rename("INT_val" = "PAT_val",
"INT_val_m" = "PAT_val_m") %>%
group_by(Speaker, gloss1, data_type) %>%
mutate(learned_next = ifelse(age == AOP-1, 1, 0)) %>%
filter(age != AOP) %>%
left_join(comparison_data) %>%
left_join(vocabsize_lyon) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE)),
INT_weighted = INT_val/vocab_agg,
EXT_weighted = EXT_target/vocab_agg) %>%
group_by(Speaker, age) %>%
mutate(INT_scaled = c(scale(INT_val, center = TRUE, scale = TRUE)),
INT_scaled_m = c(scale(INT_val_m, center = TRUE, scale = TRUE)),
INT_vocab_scaled = c(scale(INT_weighted, center = TRUE, scale = TRUE)),
EXT_vocab_scaled = c(scale(EXT_weighted, center = T, scale = T)),
EXT_scaled_target = c(scale(EXT_target, center = TRUE, scale = TRUE)),
EXT_scaled_actual = c(scale(EXT_actual, center = TRUE, scale = TRUE))) %>%
ungroup() %>%
mutate(gloss1 = str_trim(gloss1),
gloss1 = ifelse(gloss1 == "balanàçoire", "balançoire", gloss1))
#regression_data %>% filter(is.na(EXT_target))
aoa_comp <- read_csv("additional_files/wordbank_item_data_comp_fr.csv") %>%
select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`16`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop) %>%
mutate(gloss1 = str_trim(gloss1)) %>%
distinct(gloss1, .keep_all = T) # parc and poisson occur twice with the same
input_freq <- read_csv("additional_files/childes_french.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_lyon.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
# freq_lyon <- read_csv("Data/freq_lyon.csv") %>%
#   mutate(Speaker = ifelse(Speaker == "Theotime", "Tim", Speaker))
# chi_freq_bychi <- read_csv("Data/chi_freq_bychi.csv")
# chi_freq_byword <- read_csv("Data/chi_freq_byword.csv")
word_cat <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
distinct(Gloss, .keep_all = T) %>%
dplyr::select(Gloss, category) %>%
rename("gloss1" = "Gloss") %>%
mutate(category = as.factor(category),
category = fct_collapse(category,
object_word = c("animals", "body_parts", "clothing", "food_drink", "furniture_rooms",
"household", "people", "outside", "places", "toys", "vehicles"),
verbs = c("action_words", "helping_verbs")))
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
# left_join(word_cat) %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n")   # how many tokens of each word included in the data
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data) %>%
mutate(aoa_comp = as.numeric(aoa_comp),
freq_scaled = c(scale(word_count, center = TRUE, scale = TRUE)),
vocab_scaled = c(scale(vocab_agg, center = TRUE, scale = TRUE)),
tokens_scaled = c(scale(n_tokens, center = TRUE, scale = TRUE)),
aoa_scaled = c(scale(aoa_comp, center= TRUE, scale = TRUE))) %>%
mutate(corpus = "French",
age_scaled = c(scale(age, center = T, scale = T)),
category = as.factor(category),
data_type = as.factor(data_type),
Speaker = as.factor(Speaker),
corpus = as.factor(corpus))
View(word_cat)
View(word_cat)
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data)
regression_data <- mean_degree_full %>% left_join(global_network_split) %>%
rename("INT_val" = "PAT_val",
"INT_val_m" = "PAT_val_m") %>%
group_by(Speaker, gloss1, data_type) %>%
mutate(learned_next = ifelse(age == AOP-1, 1, 0)) %>%
filter(age != AOP) %>%
left_join(comparison_data) %>%
left_join(vocabsize_lyon) %>%
ungroup() %>%
mutate(AOP_scaled = c(scale(AOP, center = TRUE, scale = TRUE)),
length_scaled = c(scale(Targetphon, center = TRUE, scale = TRUE)),
INT_weighted = INT_val/vocab_agg,
EXT_weighted = EXT_target/vocab_agg) %>%
group_by(Speaker, age) %>%
mutate(INT_scaled = c(scale(INT_val, center = TRUE, scale = TRUE)),
INT_scaled_m = c(scale(INT_val_m, center = TRUE, scale = TRUE)),
INT_vocab_scaled = c(scale(INT_weighted, center = TRUE, scale = TRUE)),
EXT_vocab_scaled = c(scale(EXT_weighted, center = T, scale = T)),
EXT_scaled_target = c(scale(EXT_target, center = TRUE, scale = TRUE)),
EXT_scaled_actual = c(scale(EXT_actual, center = TRUE, scale = TRUE))) %>%
ungroup() %>%
mutate(gloss1 = str_trim(gloss1),
gloss1 = ifelse(gloss1 == "balanàçoire", "balançoire", gloss1))
aoa_comp <- read_csv("additional_files/wordbank_item_data_comp_fr.csv") %>%
select(-downloaded, -item_id) %>%
pivot_longer(cols = `8`:`16`, names_to = "age", values_to = "prop") %>%
filter(prop >= .5) %>%
group_by(item_definition) %>% # for homophones, pick the earliest-acquired version
filter(age == min(age)) %>%
rename(gloss1 = item_definition,
aoa_comp = age) %>%
select(-prop, -category) %>%
mutate(gloss1 = str_trim(gloss1)) %>%
distinct(gloss1, .keep_all = T) # parc and poisson occur twice with the same
input_freq <- read_csv("additional_files/childes_french.csv") %>%
mutate(gloss1 = tolower(word)) %>%
select(gloss1, word_count) %>%
group_by(gloss1) %>%
filter(word_count == max(word_count))
session_data <- read_csv("Data/comparison_data_lyon.csv") %>%    # need to add ordinal session numbers for GAMMs
group_by(Speaker, age) %>%
tally() %>%
filter(n > 1) %>%
dplyr::select(Speaker, age) %>%
group_by(Speaker, age) %>%
tally() %>%
mutate(session_ordinal = row_number()) %>%
dplyr::select(-n)
word_cat <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
distinct(Gloss, .keep_all = T) %>%
dplyr::select(Gloss, category) %>%
rename("gloss1" = "Gloss") %>%
mutate(category = as.factor(category),
category = fct_collapse(category,
object_word = c("animals", "body_parts", "clothing", "food_drink", "furniture_rooms",
"household", "people", "outside", "places", "toys", "vehicles"),
verbs = c("action_words", "helping_verbs")))
FULLsample_var <- feather::read_feather("Data/FULLsample_Lyon.feather") %>%
group_by(Speaker, Gloss) %>%
tally() %>%
# left_join(word_cat) %>%
rename("gloss1" = "Gloss",
"n_tokens" = "n")   # how many tokens of each word included in the data
regression_data <- regression_data %>%
left_join(input_freq, by = "gloss1") %>%
left_join(word_cat) %>%
left_join(aoa_comp, by = "gloss1") %>%
left_join(FULLsample_var) %>%
left_join(session_data) %>%
mutate(aoa_comp = as.numeric(aoa_comp),
freq_scaled = c(scale(word_count, center = TRUE, scale = TRUE)),
vocab_scaled = c(scale(vocab_agg, center = TRUE, scale = TRUE)),
tokens_scaled = c(scale(n_tokens, center = TRUE, scale = TRUE)),
aoa_scaled = c(scale(aoa_comp, center= TRUE, scale = TRUE))) %>%
mutate(corpus = "French",
age_scaled = c(scale(age, center = T, scale = T)),
category = as.factor(category),
data_type = as.factor(data_type),
Speaker = as.factor(Speaker),
corpus = as.factor(corpus))
regression_data$category = relevel(regression_data$category, ref="object_word")
feather::write_feather(regression_data, "Data/repofiles/regression_data_lyon.feather")
gc()
