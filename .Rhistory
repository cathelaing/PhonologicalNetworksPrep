FULLsample <- FULLsample %>% left_join(lexicon, by = "Gloss") %>%
filter(inCDI == TRUE) %>%
dplyr::select(-Gloss) %>%
rename("Gloss" = "gloss1")
View(FULLsample)
FULLsample <- rbind(sample_Alex,
sample_Lily,
sample_Violet,
sample_William,
sample_Naima18,
sample_Naima24,
sample_Naima27,
sample_Naima30) %>%
dplyr::select(Speaker,
Age,
Session,
Orthography,
`IPA Target`,
`IPA Actual`,
`Exact Match`,
`IPA Target CV`,
`IPA Actual CV`,
`CV Match`,
`IPA Target Syllable Count`,
`IPA Actual Syllable Count`,
`Syllable Count Match`) %>%
rename(
"IPAtarget" = `IPA Target`,
"IPAactual" = `IPA Actual`,
"IPAmatch" = `Exact Match`,
"TargetCV" = `IPA Target CV`,
"ActualCV" = `IPA Actual CV`,
"CVmatch" = `CV Match`,
"Targetphon" = `IPA Target Syllable Count`,
"Actualphon" = `IPA Actual Syllable Count`,
"Sylmatch" = `Syllable Count Match`,
"Gloss" = "Orthography"
) %>%
filter(Gloss != "xxx" &
Gloss != "xxx:" &
Gloss != "yyy" &
Gloss != "(.)" &
IPAtarget != "*" &
IPAactual != "*" &
IPAactual != "(.)") %>%
mutate(Gloss = factor(Gloss),
TargetCV = factor(TargetCV),
ActualCV = factor(ActualCV)) %>%
tibble::rowid_to_column("ID") %>%
filter(!grepl(remove.list, Gloss))
FULLsample$Gloss <- gsub("(@).*", "\\1", FULLsample$Gloss)
FULLsample$Gloss <- str_replace_all(FULLsample$Gloss, "[^[:alnum:]]", "")
FULLsample$Gloss <- gsub("(@).*", "\\1", FULLsample$Gloss)
FULLsample$Gloss <- str_replace_all(FULLsample$Gloss, "[^[:alnum:]]", "")
FULLsample <- FULLsample %>% left_join(lexicon, by = "Gloss") %>%
filter(inCDI == TRUE)
View(lexicon)
lexicon <- read_csv("Data/lexicon_CDI.csv")
View(lexicon)
lexicon <- read_csv("Data/lexicon_CDI.csv") %>%
rename("Gloss" = "word") %>%
distinct(Gloss, .keep_all = TRUE)
FULLsample <- rbind(sample_Alex,
sample_Lily,
sample_Violet,
sample_William,
sample_Naima18,
sample_Naima24,
sample_Naima27,
sample_Naima30) %>%
dplyr::select(Speaker,
Age,
Session,
Orthography,
`IPA Target`,
`IPA Actual`,
`Exact Match`,
`IPA Target CV`,
`IPA Actual CV`,
`CV Match`,
`IPA Target Syllable Count`,
`IPA Actual Syllable Count`,
`Syllable Count Match`) %>%
rename(
"IPAtarget" = `IPA Target`,
"IPAactual" = `IPA Actual`,
"IPAmatch" = `Exact Match`,
"TargetCV" = `IPA Target CV`,
"ActualCV" = `IPA Actual CV`,
"CVmatch" = `CV Match`,
"Targetphon" = `IPA Target Syllable Count`,
"Actualphon" = `IPA Actual Syllable Count`,
"Sylmatch" = `Syllable Count Match`,
"Gloss" = "Orthography"
) %>%
filter(Gloss != "xxx" &
Gloss != "xxx:" &
Gloss != "yyy" &
Gloss != "(.)" &
IPAtarget != "*" &
IPAactual != "*" &
IPAactual != "(.)") %>%
mutate(Gloss = factor(Gloss),
TargetCV = factor(TargetCV),
ActualCV = factor(ActualCV)) %>%
tibble::rowid_to_column("ID") %>%
filter(!grepl(remove.list, Gloss))
FULLsample$Gloss <- gsub("(@).*", "\\1", FULLsample$Gloss)
FULLsample$Gloss <- str_replace_all(FULLsample$Gloss, "[^[:alnum:]]", "")
FULLsample <- FULLsample %>% left_join(lexicon, by = "Gloss") %>%
filter(inCDI == TRUE)
View(lexicon)
lexicon <- read_csv("Data/lexicon_CDI.csv")
df_P <- feather::read_feather("Data/distance_full_Providence.feather") %>% mutate(corpus = "English")
View(df_P)
View(df_P)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, S4C1.S4C1, S4C2.S4C2)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
print(n = 100)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
istinct(Gloss, .keep_all = T)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T)
df_P %>% filter(nsyl_target == 3 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
(0.5 - -1)^2 + (0 - 1)^2 + (1 --1)^2 + (0 --1)^2 + (-1-1)^2 + (-1-1)^2 + (1-0)^2 + (-1--1)^2 + (-1-1)^2 + (1-0)^2 + (0-0)^2
df_P %>% filter(nsyl_target == 3 & data_type == "Actual") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
df_P %>% filter(nsyl_target == 3 & data_type == "Actual") %>% dplyr::select(Gloss, IPAactual, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
df_P %>% filter(nsyl_target == 1 & data_type == "Target") %>% dplyr::select(Gloss, IPAtarget, S1C1.S1C1, S1C2.S1C2, S1CF1.S1CF1, S1CF2.S1CF2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
df_P %>% filter(nsyl_target == 3 & data_type == "Actual") %>% dplyr::select(Gloss, IPAactual, S1C1.S1C1, S1C2.S1C2, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
df_P %>% filter(nsyl_target == 3 & data_type == "Actual") %>% dplyr::select(Gloss, IPAactual, S1C1.S1C1, S1C2.S1C2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
df_P %>% filter(nsyl_target == 1 & data_type == "Actual") %>% dplyr::select(Gloss, IPAactual, S1C1.S1C1, S1C2.S1C2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
df_P %>% filter(nsyl_target == 3 & data_type == "Actual") %>% dplyr::select(Gloss, IPAactual, S1C1.S1C1, S1C2.S1C2, S2C1.S2C1, S2C2.S2C2, S3C1.S3C1, SFC1.SFC1, SFC2.SFC2) %>%
distinct(Gloss, .keep_all = T) %>% print(n=50)
source("prelims.R")
r_refs(file="r-references.bib")
my_citations <- cite_r(
file="r-references.bib"
, pkgs=c("tidyverse", "igraph", "papaja", "lmerTest")
, withhold=FALSE
, footnote=TRUE
)
# load files
globalthresholds_AOP_lyon <- feather::read_feather("Data/globalthresholds_AOP_lyon.feather") %>%
filter(threshold == 0.25) %>%
mutate(corpus = "French")
globalthresholds_AOP_providence <- feather::read_feather("Data/globalthresholds_AOP_providence.feather") %>%
filter(threshold == 0.25) %>%
mutate(corpus = "English")
globalthresholds_AOP <- rbind(globalthresholds_AOP_lyon, globalthresholds_AOP_providence)
regression_data_lyon <- feather::read_feather("Data/regression_data_lyon.feather")
regression_data_providence <- feather::read_feather("Data/regression_data_providence.feather")
regression_data <- rbind(regression_data_lyon, regression_data_providence) %>% mutate(corpus = fct_recode(corpus,
"English" = "Providence",
"French" = "Lyon"))
globalsmallworlddata_L <- feather::read_feather("Data/globalsmallworlddata_comparison_lyon.feather") %>% mutate(corpus = "French")
globalsmallworlddata_P <- feather::read_feather("Data/globalsmallworlddata_comparison_providence.feather") %>% mutate(corpus = "English")
globalsmallworlddata <- rbind(globalsmallworlddata_P, globalsmallworlddata_L) # remove variables that aren't used
SWD_red <- globalsmallworlddata[which(complete.cases(globalsmallworlddata[
,c('path_length', 'clust_coef_global', 'clust_coef_avg', 'mean_k')])),]
global_distance_providence <- feather::read_feather("Data/globaldistance_Providence.feather")
global_distance_lyon <- feather::read_feather("Data/globaldistance_Lyon.feather")
global_distance <- rbind(global_distance_providence, global_distance_lyon)
comparison_data_P <- read_csv("Data/comparison_data_providence.csv") %>% mutate(corpus = "English") %>%
dplyr::select(-TargetCV_edited, -ActualCV_edited)
comparison_data_L <- read_csv("Data/comparison_data_lyon.csv") %>% mutate(corpus = "French")
comparison_data <- rbind(comparison_data_P, comparison_data_L)
source("PhonologicalNetworks-Figures.R")
source("PhonologicalNetworks-Tables.R")
stat_sum_df <- function(fun, geom="crossbar", ...) {
stat_summary(fun.data=fun, colour="red", geom=geom, width=0.2, ...)
}
reg_dat <- regression_data[which(complete.cases(regression_data[,c('PAQ_scaled_target', 'PAT_scaled', 'length_scaled', 'freq_scaled', 'age_scaled', 'corpus')])),]
model0_A <- glmer(learned_next ~
length_scaled*age_scaled +
tokens_scaled*age_scaled +
freq_scaled*age_scaled +
corpus +
(1+age_scaled|Speaker) +
(1+session_ordinal|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),  # specifiying optimizer to support convergence (does not                                                                             converge without this)
data=subset(reg_dat, data_type == "actual" & !is.na(PAQ_scaled_target)))
model1_A <- glmer(learned_next ~
length_scaled*age_scaled +
tokens_scaled*age_scaled +
freq_scaled*age_scaled +
corpus +
PAT_scaled*age_scaled +
(1+age_scaled|Speaker) +
(1+session_ordinal|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=subset(reg_dat, data_type == "actual" & !is.na(PAQ_scaled_target)))
model2_A <- glmer(learned_next ~
length_scaled*age_scaled +
tokens_scaled*age_scaled +
freq_scaled*age_scaled +
corpus +
PAQ_scaled_target*age_scaled +
(1+age_scaled|Speaker) +
(1+session_ordinal|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=subset(reg_dat, data_type == "actual" & !is.na(PAQ_scaled_target)))
models01_A <- anova(model0_A, model1_A) # p<.001
models02_A <- anova(model0_A, model2_A) # NS
model3_A <- glmer(learned_next ~
length_scaled*age_scaled +
tokens_scaled*age_scaled +
freq_scaled*age_scaled +
corpus +
PAQ_scaled_target*age_scaled +
PAT_scaled*age_scaled +
(1+age_scaled|Speaker) +
(1+session_ordinal|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=subset(reg_dat, data_type == "actual"& !is.na(PAQ_scaled_target)))
models13_A <- anova(model1_A, model3_A) # NS
models23_A <- anova(model2_A, model3_A) # p<.001
#summary(model3_A)
table.A.model.output <- rbind(models01_A, models02_A, models13_A, models23_A) %>%
rownames_to_column(var="Model") %>%
filter(Chisq > 0) %>%
rename(#"PA Df"="Df",
#"PA Chisq"="Chisq",
"p"=`Pr(>Chisq)`) %>%
mutate(Model=fct_recode(Model,
"null vs. PAT"="model1_A",
"null vs. PAQ"="model2_A",
"PAT vs. PAT+PAQ"="model3_A",
"PAQ vs. PAT+PAQ"="model3_A1"),
p=scales::pvalue(p)#,
# Corpus = ifelse(Model == "null vs. PAT", "English", "")
) %>%
select(Model, `Df`, `Chisq`, `p`)
model.summary_A <- summary(model3_A)
model3_A_tab <- model.summary_A$coefficients %>%
as.data.frame %>%
rename(
"b"="Estimate"
, "SE"="Std. Error"
, "z"="z value"
, "p"="Pr(>|z|)") %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
)
table.model3_A <- model3_A_tab %>%
printnum(
digits=c(2, 2, 2, 3)
, gt1=c(TRUE, TRUE, TRUE, TRUE)
, zero=c(TRUE, TRUE, TRUE, TRUE)
) %>%
select(Effect, `b`, `SE`, `z`, `p`) %>%
rename("beta"=`b`) %>%
mutate(beta=as.numeric(beta),
SE=as.numeric(SE),
`z`=as.numeric(`z`),
`p`=as.numeric(`p`),
p=scales::pvalue(p))
age_PAT_slope_A <- sim_slopes(model3_A,
pred=PAT_scaled,
modx=age_scaled,
johnson_neyman=FALSE)
age_PAT_A <- age_PAT_slope_A$slopes %>%
as.data.frame %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
) %>%
printnum(
digits=c(2, 2, 2, 3)
, gt1=c(TRUE, TRUE, TRUE, TRUE)
, zero=c(TRUE, TRUE, TRUE, TRUE)
) %>%
rename(
"age_scaled"=`Value of age_scaled`,
"b"=`Est.`,
"Scaled age" = `Effect`,
"z" = `z val.`
) %>%
mutate(
b=as.numeric(b),
p=as.numeric(p),
p=scales::pvalue(p),
Interaction = ifelse(`Scaled age` == 1, "Age x PAT", ""),
# Corpus = ifelse(`Scaled age` ==1, "English", ""),
`Data type` = ifelse(`Scaled age`==1, "Actual", ""),
`Scaled age` = fct_recode(`Scaled age`,
`-1SD` = "1",
Mean = "2",
`+1SD` = "3")) %>%
dplyr::select(Interaction, `Data type`, `Scaled age`, b, z, p)
age.PAT_A <- effect('age_scaled*PAT_scaled', model3_A,
xlevels=list(age_scaled=c(-1, 0, 1),
se=TRUE, confidence.level=.95, typical=mean))
age.PAT_A <- as.data.frame(age.PAT_A)
age.PAT_A$age_scaled <- factor(age.PAT_A$age_scaled,
levels=c(-1, 0, 1),
labels=c("-1SD", "Mean", "+1SD"))
age.PAT_A$PAT_scaled <- factor(age.PAT_A$PAT_scaled)
age.PAT_A <- age.PAT_A %>%
rename("factor"="PAT_scaled") %>%
mutate(Interaction="PAT values",
data_type="Actual")
slopes <- rbind(age.length_A, age.length_T, age.PAT_A)
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=age_scaled))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=age_scaled)) +
scale_colour_discrete(name="Age") +
#ylim(0,.4)+
ylab("Predicted probability of a word being \nlearned in the following month")+
xlab("Growth value (scaled)")+
#ggtitle("Age * PAQ Values (English, Actual)") +
#guides(color=guide_legend(override.aes=list(fill=NA))) +
theme_bw(base_size=14) +
theme(#    panel.grid.major=element_blank(),
# panel.grid.minor=element_blank(),
legend.title=element_blank(),
legend.position="bottom") #+
Plot.slopes
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=age_scaled))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=age_scaled)) +
scale_colour_discrete(name="Age") +
#ylim(0,.4)+
ylab("Predicted probability of a word being \nlearned in the following month")+
xlab("Growth value (scaled)")+
#ggtitle("Age * PAQ Values (English, Actual)") +
#guides(color=guide_legend(override.aes=list(fill=NA))) +
theme_bw(base_size=14) +
theme(#    panel.grid.major=element_blank(),
# panel.grid.minor=element_blank(),
legend.title=element_blank(),
legend.position="bottom") #+
Plot.slopes
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=PAT_scaled))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=PAT_scaled)) +
scale_colour_discrete(name="Age") +
#ylim(0,.4)+
ylab("Predicted probability of a word being \nlearned in the following month")+
xlab("Growth value (scaled)")+
#ggtitle("Age * PAQ Values (English, Actual)") +
#guides(color=guide_legend(override.aes=list(fill=NA))) +
theme_bw(base_size=14) +
theme(#    panel.grid.major=element_blank(),
# panel.grid.minor=element_blank(),
legend.title=element_blank(),
legend.position="bottom") #+
Plot.slopes
model3_A <- glmer(learned_next ~
length_scaled*session_ordinal +
tokens_scaled*session_ordinal +
freq_scaled*session_ordinal +
corpus +
PAQ_scaled_target*session_ordinal +
PAT_scaled*session_ordinal +
(1+age_scaled|Speaker) +
(1+session_ordinal|Speaker),
family=binomial("logit"),
control=glmerControl(calc.derivs=FALSE,
optimizer="bobyqa",
optCtrl=list(maxfun=2e5)),
data=subset(reg_dat, data_type == "actual"& !is.na(PAQ_scaled_target)))
summry(model3_A)
summary(model3_A)
View(regression_data)
age_PAT_slope_A <- sim_slopes(model3_A,
pred=PAT_scaled,
modx=age_scaled,
johnson_neyman=FALSE)
age_PAT_A <- age_PAT_slope_A$slopes %>%
as.data.frame %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
) %>%
printnum(
digits=c(2, 2, 2, 3)9
age_PAT_slope_A <- sim_slopes(model3_A,
pred=PAT_scaled,
modx=session_ordinal,
johnson_neyman=FALSE)
age_PAT_A <- age_PAT_slope_A$slopes %>%
as.data.frame %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
) %>%
printnum(
digits=c(2, 2, 2, 3)9
age_PAT_A <- age_PAT_slope_A$slopes %>%
as.data.frame %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
)
View(age_PAT_A)
age_PAT_A <- age_PAT_slope_A$slopes %>%
as.data.frame %>%
mutate(
Effect=papaja:::beautify_terms(rownames(.))
) %>%
printnum(
digits=c(2, 2, 2, 3)
, gt1=c(TRUE, TRUE, TRUE, TRUE)
, zero=c(TRUE, TRUE, TRUE, TRUE)
) %>%
rename(
"session_ordinal"=`Value of session_ordinal`,
"b"=`Est.`,
"Scaled age" = `Effect`,
"z" = `z val.`
) %>%
mutate(
b=as.numeric(b),
p=as.numeric(p),
p=scales::pvalue(p),
Interaction = ifelse(`Scaled age` == 1, "Age x PAT", ""),
# Corpus = ifelse(`Scaled age` ==1, "English", ""),
`Data type` = ifelse(`Scaled age`==1, "Actual", ""),
`Scaled age` = fct_recode(`Scaled age`,
`-1SD` = "1",
Mean = "2",
`+1SD` = "3")) %>%
dplyr::select(Interaction, `Data type`, `Scaled age`, b, z, p)
age.PAT_A <- effect('age_scaled*PAT_scaled', model3_A,
xlevels=list(age_scaled=c(-1, 0, 1),
se=TRUE, confidence.level=.95, typical=mean))
age.PAT_A <- effect('session_ordinal*PAT_scaled', model3_A,
xlevels=list(age_scaled=c(-1, 0, 1),
se=TRUE, confidence.level=.95, typical=mean))
age.PAT_A <- as.data.frame(age.PAT_A)
age.PAT_A <- as.data.frame(age.PAT_A)
age.PAT_A$age_scaled <- factor(age.PAT_A$session_ordinal,
levels=c(-1, 0, 1),
labels=c("-1SD", "Mean", "+1SD"))
age.PAT_A$PAT_scaled <- factor(age.PAT_A$PAT_scaled)
age.PAT_A <- age.PAT_A %>%
rename("factor"="PAT_scaled") %>%
mutate(Interaction="PAT values",
data_type="Actual")
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=age_scaled))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=age_scaled)) +
scale_colour_discrete(name="Age") +
#ylim(0,.4)+
ylab("Predicted probability of a word being \nlearned in the following month")+
xlab("Growth value (scaled)")+
#ggtitle("Age * PAQ Values (English, Actual)") +
#guides(color=guide_legend(override.aes=list(fill=NA))) +
theme_bw(base_size=14) +
theme(#    panel.grid.major=element_blank(),
# panel.grid.minor=element_blank(),
legend.title=element_blank(),
legend.position="bottom") #+
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=session_ordinal))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=session_ordinal)) +
scale_colour_discrete(name="Age") +
#ylim(0,.4)+
ylab("Predicted probability of a word being \nlearned in the following month")+
xlab("Growth value (scaled)")+
#ggtitle("Age * PAQ Values (English, Actual)") +
#guides(color=guide_legend(override.aes=list(fill=NA))) +
theme_bw(base_size=14) +
theme(#    panel.grid.major=element_blank(),
# panel.grid.minor=element_blank(),
legend.title=element_blank(),
legend.position="bottom") #+
Plot.slopes
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=session_ordinal))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=session_ordinal))
Plot.slopes
Plot.slopes <- ggplot(data=age.PAT_A, aes(x=(as.numeric(as.character(factor), decreasing=TRUE)), y=fit, group=session_ordinal))+
#geom_rect(data=subset(all_slopes, Corpus == 'French' & (Interaction == "PAT values" | Interaction == "PAQ values"))) +  #aes(fill=Corpus),xmin=-Inf,xmax=Inf,
#              ymin=-Inf,ymax=Inf,alpha=0.1, fill="gray90") +
geom_smooth(size=1, aes(color=session_ordinal)) +
#scale_colour_discrete(name="Age") +
#ylim(0,.4)+
ylab("Predicted probability of a word being \nlearned in the following month")+
xlab("Growth value (scaled)")+
#ggtitle("Age * PAQ Values (English, Actual)") +
#guides(color=guide_legend(override.aes=list(fill=NA))) +
theme_bw(base_size=14) +
theme(#    panel.grid.major=element_blank(),
# panel.grid.minor=element_blank(),
legend.title=element_blank(),
legend.position="bottom") #+
Plot.slopes
View(age.PAT_A)
